import { OperationRecord } from '@/components/OperationHistory';
import { SOPBlock } from '@/types/sop';

// ÂÆö‰πâÊìç‰ΩúÊï∞ÊçÆÁöÑÁ±ªÂûã
interface UploadData {
  video_url?: string;
  audio_url?: string;
  session_id?: string;
}

interface SpeechRecognitionData {
  speech_result?: unknown;
}

interface VideoUnderstandingData {
  video_result?: string;
  fps?: number;
}

interface SOPParseData {
  blocks_count?: number;
}

interface SOPRefineData {
  blocks_count?: number;
  has_user_notes?: boolean;
}

interface FileRemovedData {
  deleted_count?: number;
}

interface VideoCompressionData {
  stage?: string;
  percentage?: number;
  current_frame?: number;
  total_frames?: number;
}


export interface SessionReportOptions {
  includeVideoLinks: boolean;
  sessionId?: string;
  clientSessionId?: string;
  uploadResult?: {
    video_url: string;
    audio_url: string;
    session_id: string;
  } | null;
  speechRecognitionResult?: {
    sentence_id: number;
    text: string;
  }[] | null;
  videoUnderstandingResult?: string;
  videoUnderstandingPrompt?: string;
  operationRecords: OperationRecord[];
  sopBlocks?: SOPBlock[];
  refinedSopBlocks?: SOPBlock[];
  sopParsePrompt?: string;
  sopRefinePrompt?: string;
}

function getLocale(): 'zh' | 'en' {
  try {
    if (typeof navigator !== 'undefined') {
      const lang = (navigator.language || '').toLowerCase();
      if (lang.startsWith('zh')) return 'zh';
      return 'en';
    }
  } catch {}
  return 'zh';
}

const tr = {
  zh: {
    report_title: 'Video2SOP ‰ºöËØùÊä•Âëä',
    generated_at: 'ÁîüÊàêÊó∂Èó¥',
    session_id: '‰ºöËØùID',
    report_type: 'Êä•ÂëäÁ±ªÂûã',
    with_links: 'ÂåÖÂê´ËßÜÈ¢ëÈìæÊé•',
    without_links: '‰∏çÂåÖÂê´ËßÜÈ¢ëÈìæÊé•',
    records_count: 'Êìç‰ΩúËÆ∞ÂΩïÊï∞',
    upload_files: '‰∏ä‰º†Êñá‰ª∂',
    video_file: 'ËßÜÈ¢ëÊñá‰ª∂',
    audio_file: 'Èü≥È¢ëÊñá‰ª∂',
    records: 'Êìç‰ΩúËÆ∞ÂΩï',
    speech_results: 'ËØ≠Èü≥ËØÜÂà´ÁªìÊûú',
    sentence: 'Âè•Â≠ê',
    video_understanding_results: 'ËßÜÈ¢ëÁêÜËß£ÁªìÊûú',
    user_prompt: 'Áî®Êà∑ÊèêÁ§∫ËØçÔºö',
    understanding_result: 'ÁêÜËß£ÁªìÊûúÔºö',
    sop_parse_results: 'SOPËß£ÊûêÁªìÊûú',
    parse_prompt: 'Ëß£ÊûêÊèêÁ§∫ËØçÔºö',
    block: 'Âå∫Âùó',
    none: 'Êó†ÂÜÖÂÆπ',
    time: 'Êó∂Èó¥',
    seconds: 'Áßí',
    sop_refine_results: 'SOPÁ≤æ‰øÆÁªìÊûú',
    refine_prompt: 'Á≤æ‰øÆÊèêÁ§∫ËØçÔºö',
    generated_by: 'Ê≠§Êä•ÂëäÁî±',
    generated_by_2: 'ÁîüÊàê',
  },
  en: {
    report_title: 'Video2SOP Session Report',
    generated_at: 'Generated at',
    session_id: 'Session ID',
    report_type: 'Report type',
    with_links: 'With video links',
    without_links: 'Without video links',
    records_count: 'Records',
    upload_files: 'Uploaded Files',
    video_file: 'Video File',
    audio_file: 'Audio File',
    records: 'Operation Records',
    speech_results: 'Speech Recognition Results',
    sentence: 'Sentence',
    video_understanding_results: 'Video Understanding Results',
    user_prompt: 'User Prompt:',
    understanding_result: 'Understanding Result:',
    sop_parse_results: 'SOP Parsing Results',
    parse_prompt: 'Parsing Prompt:',
    block: 'Block',
    none: 'No content',
    time: 'Time',
    seconds: 's',
    sop_refine_results: 'SOP Refinement Results',
    refine_prompt: 'Refinement Prompt:',
    generated_by: 'This report is generated by',
    generated_by_2: '',
  }
} as const;

export function generateSessionReport(options: SessionReportOptions): string {
  const {
    includeVideoLinks,
    sessionId,
    clientSessionId,
    uploadResult,
    speechRecognitionResult,
    videoUnderstandingResult,
    videoUnderstandingPrompt,
    operationRecords,
    sopBlocks,
    refinedSopBlocks,
    sopParsePrompt,
    sopRefinePrompt
  } = options;

  const locale = getLocale();
  const timestamp = new Date().toLocaleString(locale === 'en' ? 'en-US' : 'zh-CN');
  const reportId = sessionId || clientSessionId || 'unknown';

  // ÁîüÊàêÊìç‰ΩúËÆ∞ÂΩïHTML
  const operationRecordsHtml = operationRecords.map(record => {
    const icon = getOperationIcon(record.type);
    const statusColor = record.status === 'success' ? 'text-green-600' : 
                       record.status === 'error' ? 'text-red-600' : 'text-yellow-600';
    
    return `
      <div class="bg-white rounded-lg border border-gray-200 p-4 mb-3">
        <div class="flex items-start space-x-3">
          <span class="text-2xl">${icon}</span>
          <div class="flex-1">
            <div class="flex items-center space-x-2 mb-2">
              <h4 class="font-semibold text-gray-800">${getOperationTitle(record.type)}</h4>
              <span class="text-xs ${statusColor}">${record.status}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">${record.message}</p>
            <p class="text-xs text-gray-500">${record.timestamp.toLocaleString(locale === 'en' ? 'en-US' : 'zh-CN')}</p>
            ${record.data ? generateDataHtml(record.data, record.type, includeVideoLinks) : ''}
          </div>
        </div>
      </div>
    `;
  }).join('');

  // ÁîüÊàêËØ≠Èü≥ËØÜÂà´ÁªìÊûúHTML
  const speechRecognitionHtml = speechRecognitionResult && speechRecognitionResult.length > 0 ? `
    <div class="bg-white rounded-lg border border-gray-200 p-4 mb-4">
      <h3 class="text-lg font-semibold text-gray-800 mb-3">üé§ ${tr[locale].speech_results}</h3>
      <div class="space-y-2">
        ${speechRecognitionResult.map((item) => `
          <div class="bg-gray-50 rounded p-3">
            <div class="text-sm text-gray-600 mb-1">${tr[locale].sentence} ${item.sentence_id}</div>
            <div class="text-gray-800">${item.text}</div>
          </div>
        `).join('')}
      </div>
    </div>
  ` : '';

  // ÁîüÊàêËßÜÈ¢ëÁêÜËß£ÁªìÊûúHTML
  const videoUnderstandingHtml = videoUnderstandingResult ? `
    <div class="bg-white rounded-lg border border-gray-200 p-4 mb-4">
      <h3 class="text-lg font-semibold text-gray-800 mb-3">üé¨ ${tr[locale].video_understanding_results}</h3>
      ${videoUnderstandingPrompt ? `
        <div class="mb-3">
          <h4 class="text-sm font-medium text-gray-700 mb-2">${tr[locale].user_prompt}</h4>
          <div class="bg-blue-50 rounded p-3">
            <pre class="whitespace-pre-wrap text-sm text-gray-800">${videoUnderstandingPrompt}</pre>
          </div>
        </div>
      ` : ''}
      <div class="bg-gray-50 rounded p-4">
        <h4 class="text-sm font-medium text-gray-700 mb-2">${tr[locale].understanding_result}</h4>
        <pre class="whitespace-pre-wrap text-sm text-gray-800">${videoUnderstandingResult}</pre>
      </div>
    </div>
  ` : '';

  // ÁîüÊàêSOPÂå∫ÂùóHTML
  const sopBlocksHtml = sopBlocks && sopBlocks.length > 0 ? `
    <div class="bg-white rounded-lg border border-gray-200 p-4 mb-4">
      <h3 class="text-lg font-semibold text-gray-800 mb-3">üìã ${tr[locale].sop_parse_results}</h3>
      ${sopParsePrompt ? `
        <div class="mb-3">
          <h4 class="text-sm font-medium text-gray-700 mb-2">${tr[locale].parse_prompt}</h4>
          <div class="bg-blue-50 rounded p-3">
            <pre class="whitespace-pre-wrap text-sm text-gray-800">${sopParsePrompt}</pre>
          </div>
        </div>
      ` : ''}
      <div class="space-y-3">
        ${sopBlocks.map((block, index) => `
          <div class="bg-gray-50 rounded p-3">
            <div class="flex items-center space-x-2 mb-2">
              <span class="text-sm font-medium text-gray-700">${tr[locale].block} ${index + 1}</span>
              <span class="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded">${block.type || 'unknown'}</span>
            </div>
            <div class="text-sm text-gray-800">${block.content || tr[locale].none}</div>
            ${block.start_time !== undefined && block.end_time !== undefined ? `
              <div class="text-xs text-gray-500 mt-1">${tr[locale].time}: ${block.start_time}${tr[locale].seconds} - ${block.end_time}${tr[locale].seconds}</div>
            ` : ''}
          </div>
        `).join('')}
      </div>
    </div>
  ` : '';

  // ÁîüÊàêSOPÁ≤æ‰øÆÁªìÊûúHTML
  const refinedSopBlocksHtml = refinedSopBlocks && refinedSopBlocks.length > 0 ? `
    <div class="bg-white rounded-lg border border-gray-200 p-4 mb-4">
      <h3 class="text-lg font-semibold text-gray-800 mb-3">‚ú® ${tr[locale].sop_refine_results}</h3>
      ${sopRefinePrompt ? `
        <div class="mb-3">
          <h4 class="text-sm font-medium text-gray-700 mb-2">${tr[locale].refine_prompt}</h4>
          <div class="bg-blue-50 rounded p-3">
            <pre class="whitespace-pre-wrap text-sm text-gray-800">${sopRefinePrompt}</pre>
          </div>
        </div>
      ` : ''}
      <div class="space-y-3">
        ${refinedSopBlocks.map((block, index) => `
          <div class="bg-gray-50 rounded p-3">
            <div class="flex items-center space-x-2 mb-2">
              <span class="text-sm font-medium text-gray-700">${tr[locale].block} ${index + 1}</span>
              <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded">${block.type || 'unknown'}</span>
            </div>
            <div class="text-sm text-gray-800">${block.content || tr[locale].none}</div>
            ${block.start_time !== undefined && block.end_time !== undefined ? `
              <div class="text-xs text-gray-500 mt-1">${tr[locale].time}: ${block.start_time}${tr[locale].seconds} - ${block.end_time}${tr[locale].seconds}</div>
            ` : ''}
          </div>
        `).join('')}
      </div>
    </div>
  ` : '';

  const html = `
<!DOCTYPE html>
<html lang="${locale === 'en' ? 'en' : 'zh-CN'}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${tr[locale].report_title}</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
  <div class="max-w-4xl mx-auto p-6">
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
      <h1 class="text-3xl font-bold text-gray-900 mb-4">${tr[locale].report_title}</h1>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
        <div>
          <span class="font-medium">${tr[locale].generated_at}:</span> ${timestamp}
        </div>
        <div>
          <span class="font-medium">${tr[locale].session_id}:</span> ${reportId}
        </div>
        <div>
          <span class="font-medium">${tr[locale].report_type}:</span> ${includeVideoLinks ? tr[locale].with_links : tr[locale].without_links}
        </div>
        <div>
          <span class="font-medium">${tr[locale].records_count}:</span> ${operationRecords.length}
        </div>
      </div>
    </div>

    ${includeVideoLinks && uploadResult ? `
      <div class="bg-white rounded-lg border border-gray-200 p-4 mb-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-3">üìÅ ${tr[locale].upload_files}</h3>
        <div class="space-y-2">
          <div class="bg-gray-50 rounded p-3">
            <div class="text-sm text-gray-600 mb-1">${tr[locale].video_file}</div>
            <div class="text-sm text-blue-600 break-all">${uploadResult.video_url}</div>
          </div>
          <div class="bg-gray-50 rounded p-3">
            <div class="text-sm text-gray-600 mb-1">${tr[locale].audio_file}</div>
            <div class="text-sm text-blue-600 break-all">${uploadResult.audio_url}</div>
          </div>
        </div>
      </div>
    ` : ''}

    ${speechRecognitionHtml}
    ${videoUnderstandingHtml}
    ${sopBlocksHtml}
    ${refinedSopBlocksHtml}

    <div class="bg-white rounded-lg border border-gray-200 p-4">
      <h3 class="text-lg font-semibold text-gray-800 mb-3">üìù ${tr[locale].records}</h3>
      <div class="space-y-3">
        ${operationRecordsHtml}
      </div>
    </div>

    <div class="mt-6 text-center text-sm text-gray-500">
      <p>${tr[locale].generated_by} <a href="${process.env.NEXT_PUBLIC_APP_GITHUB || '#'}" target="_blank" style="color: #3b82f6; text-decoration: none;">Video2SOP</a> ${tr[locale].generated_by_2}</p>
      <p>${tr[locale].generated_at}: ${timestamp}</p>
    </div>
  </div>
</body>
</html>
  `;

  return html;
}

function getOperationIcon(type: OperationRecord['type']): string {
  switch (type) {
    case 'upload': return 'üìÅ';
    case 'speech_recognition': return 'üé§';
    case 'video_understanding': return 'üé¨';
    case 'video_compression': return 'üóúÔ∏è';
    case 'sop_parse': return 'üìã';
    case 'sop_refine': return '‚ú®';
    case 'file_removed': return 'üóëÔ∏è';
    default: return 'üìù';
  }
}

function getOperationTitle(type: OperationRecord['type']): string {
  switch (type) {
    case 'upload': return 'ËßÜÈ¢ë‰∏ä‰º†';
    case 'speech_recognition': return 'ËØ≠Èü≥ËØÜÂà´';
    case 'video_understanding': return 'ËßÜÈ¢ëÁêÜËß£';
    case 'video_compression': return 'ËßÜÈ¢ëÂéãÁº©';
    case 'sop_parse': return 'ËçâÁ®øËß£Êûê';
    case 'sop_refine': return 'SOPÁ≤æ‰øÆ';
    case 'file_removed': return 'Êñá‰ª∂Âà†Èô§';
    default: return 'Êú™Áü•Êìç‰Ωú';
  }
}

function generateDataHtml(data: unknown, type: OperationRecord['type'], includeVideoLinks: boolean): string {
  if (!data) return '';
  
  let html = '<div class="mt-2 text-xs text-gray-500">';
  
  switch (type) {
    case 'upload': {
      const uploadData = data as UploadData;
      if (includeVideoLinks) {
        if (uploadData.video_url) {
          html += `<div>ËßÜÈ¢ë: <span class="text-blue-600 break-all">${uploadData.video_url}</span></div>`;
        }
        if (uploadData.audio_url) {
          html += `<div>Èü≥È¢ë: <span class="text-blue-600 break-all">${uploadData.audio_url}</span></div>`;
        }
      } else {
        // ‰∏çÂåÖÂê´ËßÜÈ¢ëÈìæÊé•Êó∂ÔºåÂè™ÊòæÁ§∫ÂÖ∂‰ªñ‰ø°ÊÅØ
        if (uploadData.session_id) {
          html += `<div>‰ºöËØùID: ${uploadData.session_id}</div>`;
        }
      }
      break;
    }
    case 'speech_recognition': {
      const speechData = data as SpeechRecognitionData;
      if (speechData.speech_result) {
        html += `<div>ËØÜÂà´ÁªìÊûú: ${JSON.stringify(speechData.speech_result)}</div>`;
      }
      break;
    }
    case 'video_understanding': {
      const videoData = data as VideoUnderstandingData;
      if (videoData.video_result) {
        html += `<div>ÁêÜËß£ÁªìÊûú: ${videoData.video_result.substring(0, 100)}${videoData.video_result.length > 100 ? '...' : ''}</div>`;
      }
      if (videoData.fps) {
        html += `<div>Â∏ßÁéá: ${videoData.fps}</div>`;
      }
      break;
    }
    case 'sop_parse': {
      const parseData = data as SOPParseData;
      if (parseData.blocks_count) {
        html += `<div>Âå∫ÂùóÊï∞Èáè: ${parseData.blocks_count}</div>`;
      }
      break;
    }
    case 'sop_refine': {
      const refineData = data as SOPRefineData;
      if (refineData.blocks_count) {
        html += `<div>Âå∫ÂùóÊï∞Èáè: ${refineData.blocks_count}</div>`;
      }
      if (refineData.has_user_notes) {
        html += `<div>ÂåÖÂê´Áî®Êà∑ÊâπÊ≥®: ÊòØ</div>`;
      }
      break;
    }
    case 'video_compression': {
      const compressionData = data as VideoCompressionData;
      if (compressionData.stage) {
        html += `<div>Èò∂ÊÆµ: ${compressionData.stage}</div>`;
      }
      if (compressionData.percentage !== undefined) {
        html += `<div>ËøõÂ∫¶: ${compressionData.percentage}%</div>`;
      }
      if (compressionData.current_frame !== undefined && compressionData.total_frames !== undefined) {
        html += `<div>Â∏ßÊï∞: ${compressionData.current_frame}/${compressionData.total_frames}</div>`;
      }
      break;
    }
    case 'file_removed': {
      const removedData = data as FileRemovedData;
      if (removedData.deleted_count) {
        html += `<div>Âà†Èô§Êñá‰ª∂Êï∞: ${removedData.deleted_count}</div>`;
      }
      break;
    }
  }
  
  html += '</div>';
  return html;
}

export function downloadSessionReport(html: string, filename?: string): void {
  const blob = new Blob([html], { type: 'text/html;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename || `video2sop-session-${Date.now()}.html`;
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
}
